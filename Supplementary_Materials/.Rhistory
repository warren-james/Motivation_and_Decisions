a <- runif(15, min = 0, max = 30)
a <- data.frame(person = seq(1,15,1),runif(15, min = 0, max = 30)
)
a
a <- data.frame(person = seq(1,15,1), pos = runif(15, min = 0, max = 30))
ggplot(a, aes(pos)) + geom_density()
library(tidyverse)
ggplot(a, aes(pos)) + geom_density()
a <- data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
a
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = runif(30, min = 0, max = 30)) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
data.frame(person = seq(1,30,1), pos = round(runif(30, min = 0, max = 30))) %>% ggplot(aes(pos)) + geom_density() + geom_histogram()
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
load("scratch/Part1_peng")
df_peng <- df %>%
mutate(participant = paste(participant, "penguin", sep = "_"))
load("scratch/Part1_cont")
df_part1 <- df %>%
mutate(participant = paste(participant, "control", sep = "_")) %>%
rbind(df_peng)
# tidy
rm(df, df_peng)
# make a quick plot?
m_dat <- df_part1 %>%
group_by(participant) %>%
summarise(accuracy = mean(accuracy))
# save
save(m_dat, file = "scratch/Part1")
m_dat %>%
ggplot(aes(accuracy)) +
geom_density()
# fit distribution
prior_est <- fitdistrplus::fitdist(m_dat$accuracy, "beta")
a <- as.numeric(prior_est$estimate[1])
b <- as.numeric(prior_est$estimate[2])
# settings for the priors
n <- 250
# mean of distribution
mu <- a/(a+b)
# transform for prior
beta_mu <- gtools::logit(mu)
beta_sd <- .4
# get precision
phi <- 1/((a*b)/(((a+b)^2)*(a+b+1)))
# transform for prior
gamma_mu <- log(phi)
gamma_sd <- 1.4
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# plot raw data and fit output
m_dat %>%
ggplot(aes(accuracy)) +
geom_density(fill = "black", alpha = 0.3) +
geom_line(data = temp,
aes(x, y),
colour = "blue")
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
# show raw data overlay
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
library(tidyverse)
library(extraDistr)
load("scratch/Part1_peng")
df_peng <- df %>%
mutate(participant = paste(participant, "penguin", sep = "_"))
load("scratch/Part1_cont")
df_part1 <- df %>%
mutate(participant = paste(participant, "control", sep = "_")) %>%
rbind(df_peng)
# tidy
rm(df, df_peng)
# make a quick plot?
m_dat <- df_part1 %>%
group_by(participant) %>%
summarise(accuracy = mean(accuracy))
# save
save(m_dat, file = "scratch/Part1")
m_dat %>%
ggplot(aes(accuracy)) +
geom_density()
# fit distribution
prior_est <- fitdistrplus::fitdist(m_dat$accuracy, "beta")
a <- as.numeric(prior_est$estimate[1])
b <- as.numeric(prior_est$estimate[2])
# settings for the priors
n <- 250
# mean of distribution
mu <- a/(a+b)
# transform for prior
beta_mu <- gtools::logit(mu)
beta_sd <- .4
# get precision
phi <- 1/((a*b)/(((a+b)^2)*(a+b+1)))
# transform for prior
gamma_mu <- log(phi)
gamma_sd <- 1.4
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# plot raw data and fit output
m_dat %>%
ggplot(aes(accuracy)) +
geom_density(fill = "black", alpha = 0.3) +
geom_line(data = temp,
aes(x, y),
colour = "blue")
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
# show raw data overlay
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
beta_sd <- 0.2
gamma_sd <- .7
load("scratch/Part1_peng")
df_peng <- df %>%
mutate(participant = paste(participant, "penguin", sep = "_"))
load("scratch/Part1_cont")
df_part1 <- df %>%
mutate(participant = paste(participant, "control", sep = "_")) %>%
rbind(df_peng)
# tidy
rm(df, df_peng)
# make a quick plot?
m_dat <- df_part1 %>%
group_by(participant) %>%
summarise(accuracy = mean(accuracy))
# save
save(m_dat, file = "scratch/Part1")
m_dat %>%
ggplot(aes(accuracy)) +
geom_density()
# fit distribution
prior_est <- fitdistrplus::fitdist(m_dat$accuracy, "beta")
a <- as.numeric(prior_est$estimate[1])
b <- as.numeric(prior_est$estimate[2])
# settings for the priors
n <- 250
# mean of distribution
mu <- a/(a+b)
# transform for prior
beta_mu <- gtools::logit(mu)
beta_sd <- .4
# get precision
phi <- 1/((a*b)/(((a+b)^2)*(a+b+1)))
# transform for prior
gamma_mu <- log(phi)
gamma_sd <- 1.4
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# plot raw data and fit output
m_dat %>%
ggplot(aes(accuracy)) +
geom_density(fill = "black", alpha = 0.3) +
geom_line(data = temp,
aes(x, y),
colour = "blue")
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
# show raw data overlay
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
beta_sd <- .2
gamma_sd <- .7
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
n <- 250
beta_mu <- (a/(a+b))
beta_sd <- 0.7
# variance
gamma_mu <- 1/(a*b)/((a+b)^2*(a+b+1))
gamma_sd <- 0.5
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
gamma_mu <- 1/(a*b)/((a+b)^2*(a+b+1))
gamma_mu <- 1/((a*b)/((a+b)^2*(a+b+1)))
gamma_mu <- 1/((a*b)/((a+b)^2*(a+b+1)))
1/gamma_mu
(a*b)/((a+b)^2*(a+b+1))
1/(a*b)/((a+b)^2*(a+b+1))
mu <- a/(a+b)
# transform for prior
beta_mu <- gtools::logit(mu)
beta_sd <- 0.1
# get precision
phi <- 1/((a*b)/(((a+b)^2)*(a+b+1)))
# transform for prior
gamma_mu <- log(phi)
gamma_sd <- 0.5
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
mu <- a/(a+b)
# transform for prior
beta_mu <- gtools::logit(mu)
beta_sd <- 0.4
# get precision
phi <- 1/((a*b)/(((a+b)^2)*(a+b+1)))
# transform for prior
gamma_mu <- log(phi)
gamma_sd <- 1.4
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
# show raw data overlay
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
# save this
ggsave("../Figures/priors_plt_estfromdata.png",
height = 3.5,
width = 5.6)
head(priors)
priors %>% group_by(x_vals) %>% summarise(y = mean(y)) %>% ggplot(aes(x_vals, y)) + goem_line()
priors %>% group_by(x_vals) %>% summarise(y = mean(y)) %>% ggplot(aes(x_vals, y)) + geom_line()
temp <- priors %>% group_by(x_vals) %>% summarise(y = mean(y))
priors_plt + geom_line(data = temp, aes(x_vals, y), colour = "blue")
setwd("F:/Uni/Github/Motivation_and_Decisions/Supplementary_Materials")
rm(list = ls())
# markdown models
library(tidyverse)
library(brms)
# load data
load("../Analysis/scratch/model_data")
model_data_scaled <- df_all %>%
group_by(participant, group, separation) %>%
summarise(act_acc = mean(correct),
exp_acc = mean(accuracy)) %>%
mutate(scaled_sep = separation/max(separation),
act_acc = act_acc*0.9999) %>%
ungroup()
m_temp <- brm(act_acc ~ group,)
head(df_all)
model_data <- df_all %>% group_by(participant, group) %>% summarise(act_acc = mean(correct), exp_acc = mean(accuracy))
head(model_data)
m_temp <- brm(act_acc ~ group, data = model_data, family = "beta", chains = 1, iter = 2000, warmup = 1000)
summary(m_temp)
m_temp_exp <- brm(exp_acc ~ group, data = model_data, family = "beta", chains = 1, iter = 2000, warmup = 1000)
summary(m_temp_exp)
tidybayes::get_variables(m_temp)
preds <- tidybayes::add_predicted_draws(m_temp)
preds <- tidybayes::add_predicted_draws(m_temp, prediction = "group")
preds <- tidybayes::add_predicted_draws(model = m_temp, prediction = "group")
citation("tidyverse")
citation("psyphy")
citation("Rlab")
version("psyphy")
package.version(psyphy)
package_version("psyphy")
package_version(psyphy)
library(psyphy)
package_version(psyphy)
package_version("psyphy")
library(psyphy)
package_version(tidyverse)
library(tidyverse)
package_version(tidyverse)
sessionInfo()
