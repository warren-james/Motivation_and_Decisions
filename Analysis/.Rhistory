# control versions (using instructed and practice from
# the transfer paper)
#### Library ####
library(tidyverse)
library(brms)
library(tidybayes)
library(rstan)
#### constants ####
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
# make first letter capital
CapStr <- function(y) {
c <- strsplit(y, " ")[[1]]
paste(toupper(substring(c, 1,1)), substring(c, 2),
sep="", collapse=" ")
}
#### load in data ####
load("scratch/all_data")
df_all <- df
#tidy
rm(df)
# work out expected accuracy?
# motivated
load("scratch/acc_sep_peng")
acc_sep_peng <- acc_sep %>%
mutate(participant = paste(participant,
"motivated",
sep = "_"))
# control + optimal
load("scratch/acc_sep_contopt")
load("scratch/df_groupID")
acc_sep <- merge(acc_sep, df_groupID) %>%
mutate(participant = paste(participant, group, sep = "_")) %>%
select(-group) %>%
rbind(acc_sep_peng)
# tidy
rm(acc_sep_peng)
# bind this to df
# need to figure out distances... before binding...
acc_sep_1 <- acc_sep %>%
mutate(separation_1 = separation,
accuracy_1 = accuracy) %>%
select(-separation, -accuracy)
acc_sep_2 <- acc_sep %>%
mutate(separation_2 = separation,
accuracy_2 = accuracy) %>%
select(-separation, -accuracy)
df_all <- df_all %>%
mutate(separation_1 = separation*centre,
separation_2 = (separation*2)-separation_1)
# merge this
df_all<- merge(df_all, acc_sep_1)
df_all<- merge(df_all, acc_sep_2) %>%
mutate(accuracy = (accuracy_1 + accuracy_2)/2) %>%
select(-separation_1, -separation_2,
-accuracy_1, -accuracy_2)
# tidy
rm(acc_sep_1, acc_sep_2)
#### remove participant that didn't complete 4 blocks ####
df_all <- df_all %>%
group_by(participant) %>%
filter(max(block) == 4)
# plot something to check
df_all%>%
group_by(participant, group) %>%
summarise(predicted = mean(accuracy),
actual = mean(correct)) %>%
gather(predicted:actual,
key = "type",
value = "accuracy") %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
facet_wrap(~type)
# sort out other groups too...
#### ACCURACY ####
#### brms models ####
#### using all data: binomial ####
# quick oneof dist_type * group for accuracy
# m_acc_group_dist <- brm(correct ~ (dist_type + group)^2,
#                         data = df,
#                         family = "bernoulli",
#                         chains = 1,
#                         cores = 1,
#                         iter = 4000)
# plot posterior
# too big... doesn't like this...
# plt_brms_group_dist <- df %>%
#   add_predicted_draws(m_acc_group_dist) %>%
#   ggplot(aes(.prediction, colour = group, fill = group)) +
#   geom_density(alpha = 0.3) +
#   # geom_density(data = df,
#   #              aes(Accuracy,
#   #                  colour = group,
#   #                  fill = NA),
#   #              alpha = 0.0001) +
#   theme_minimal() +
#   ggthemes::scale_colour_ptol() +
#   ggthemes::scale_fill_ptol() +
#   facet_wrap(~dist_type)
#### Using averages: beta ####
# all interactions
model_data <- df_all%>%
group_by(participant, dist_type, group) %>%
summarise(Accuracy = mean(correct)) %>%
mutate(Accuracy = (Accuracy + 1e-5)*0.9999)
m_acc_group_dist_beta <- brm(Accuracy ~ (dist_type + group)^2,
data = model_data,
family = "beta",
chains = 1,
cores = 1,
iter = 4000)
mu_df <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2])
View(mu_df)
as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
select(-remove) %>%
ungroup() %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density()
mu_df <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
select(-remove) %>%
ungroup() %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3)
mu_df$labels$x <- "Predicted avg accuracy"
mu_df
mu_df <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
select(-remove) %>%
ungroup() %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
mu_df$labels$x <- "Predicted avg accuracy"
mu_df
mu_df <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
select(-remove) %>%
ungroup() %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
mu_df$labels$x <- "Predicted avg accuracy"
mu_df$labels$colour <- "Group"
mu_df$labels$fill <- "Group"
mu_df
a <- c(2,3,4)
mean(a)
b <- c(4,5,6)
mean(b)
mean(3,5)
mean(a,b)
mean(c(a,b))
mean(c(mean(a), mean(b)))
b <- c(4,5,6,7)
mean(b)
mean(c(a,b))
mean(c(mean(a), mean(b)))
rm(a,b)
model_data_3 <- df_all%>%
group_by(participant, group) %>%
summarise(pred_accuracy = mean(accuracy))
head(model_data_3)
X <- model.matrix(pred_accuracy ~ group, data = model_data_2)
stan_df <- list(
N = nrow(model_data_2),
K = ncol(X),
y = model_data_2$pred_accuracy,
X = X
)
m_stan_group_exp <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
X <- model.matrix(pred_accuracy ~ group, data = model_data_3)
stan_df <- list(
N = nrow(model_data_2),
K = ncol(X),
y = model_data_3$pred_accuracy,
X = X
)
m_stan_group_exp <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
samples <- rstan::extract(m_stan_group_exp)
mu_df_exp <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
select(-remove) %>%
ungroup() %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
mu_df_exp$labels$x <- "Predicted Mean Expected Success Rate"
mu_df_exp$labels$colour <- "Group"
mu_df_exp$labels$fill <- "Group"
mu_df_exp
mu_df
rm(temp)
head(mu_df_exp[["data"]])
mu_df_exp <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
mu_df_exp$labels$x <- "Predicted Mean Expected Success Rate"
mu_df_exp$labels$colour <- "Group"
mu_df_exp$labels$fill <- "Group"
mu_df_exp
mu_df <- as.tibble(samples$mu) %>%
rownames_to_column(var = "iter") %>%
gather(V1:V42,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(model_data_new) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
mu_df$labels$x <- "Predicted Mean Success Rate"
mu_df$labels$colour <- "Group"
mu_df$labels$fill <- "Group"
mu_df
head(samples$mu)
head(as.tibbble(samples$mu))
head(as.tibble(samples$mu))
a <- c(1,2,3,4,5,6,7)
a[1]
a[2:end]
a[2:]
a[2,]
a[2]
a[2:ncol(a)]
a[2:length(a)]
temp <- as.tibble(samples$mu) %>% rownames_to_column() %>% gather(c(2:ncol), key "something", value = "else")
temp <- as.tibble(samples$mu) %>% rownames_to_column() %>% gather(c(2:ncol), key = "something", value = "else")
temp <- as.tibble(samples$mu) %>% rownames_to_column() %>% gather(c(2:42), key = "something", value = "else")
View(temp)
temp <- as.tibble(samples$mu) %>% rownames_to_column() %>% gather(c(2:43), key = "something", value = "else")
tail(a)
a <- seq(1,42,1)
tail(a)
tail(a, length(a))
tail(a, length(a)-1)
temp <- as.tibble(samples$mu) %>% rownames_to_column() %>% gather(c(,-1), key = "something", value = "else")
temp <- as.tibble(samples$mu) %>% rownames_to_column() %>% gather(-1, key = "something", value = "else")
View(temp)
make_plt <- function(data){
output <- as.tibble(data) %>%
gather(-1,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
return(output)
}
temp <- make_plt(samples$mu)
temp
temp <- make_plt(samples$mu, model_data_new)
make_plt <- function(model_output, data){
output <- as.tibble(model_output) %>%
gather(-1,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(data)
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
return(output)
}
temp <- make_plt(samples$mu, model_data_new)
make_plt <- function(model_output, dataframe){
output <- as.tibble(model_output) %>%
gather(-1,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(dataframe) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
return(output)
}
temp <- make_plt(samples$mu, model_data_new)
temp
samples <- rstan::extract(m_stan_group)
mu_df <- make_plt(samples$mu, model_data_new)
mu_df$labels$x <- "Predicted Mean Success Rate"
mu_df$labels$colour <- "Group"
mu_df$labels$fill <- "Group"
mu_df
samples <- rstan::extract(m_stan_group_exp)
mu_df_exp <- make_plt(samples$mu, model_data_new)
mu_df_exp$labels$x <- "Predicted Mean Expected Success Rate"
mu_df_exp$labels$colour <- "Group"
mu_df_exp$labels$fill <- "Group"
mu_df_exp
rm(temp)
launch_shinystan(m_stan_group_exp)
rm(a)
make_plt <- function(model_output, dataframe, dist_true){
output <- as.tibble(model_output) %>%
gather(-1,
key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(dataframe) %>%
ggplot(aes(pred_mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
if(dist_true == T){
output <- output + facet_wrap(~dist_type)
}
return(output)
}
mu_df <- make_plt(samples$mu, model_data_new, FALSE)
mu_df$labels$x <- "Predicted Mean Success Rate"
mu_df$labels$colour <- "Group"
mu_df$labels$fill <- "Group"
mu_df
X <- model.matrix(Accuracy ~ group + dist_type, data = model_data_2)
head(model_data_2)
head(model_data)
X <- model.matrix(Accuracy ~ group + dist_type, data = model_data)
View(X)
X <- model.matrix(Accuracy ~ (group + dist_type)^2, data = model_data)
View(X)
X <- model.matrix(Accuracy ~ (group + dist_type)^2, data = model_data)
stan_df <- list(
N = nrow(model_data),
K = ncol(X),
y = model_data$Accuracy,
X = X
)
m_stan_group_dist <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
mu_df_dist <- make_plt(samples$mu, model_data, TRUE)
samples <- m_stan_group_dist
mu_df_dist <- make_plt(samples$mu, model_data, TRUE)
head(as.tibble(samples$mu))
View(samples)
samples <- rstan::extract(m_stan_group_dist)
mu_df_dist <- make_plt(samples$mu, model_data, TRUE)
mu_df_dist
head(model_data)
temp <- mu_df_dist[["data"]]
View(temp)
head(temp)
unique(temp$group)
unique(temp$dist_type)
launch_shinystan(m_stan_group_dist)
stan_df <- list(
N = nrow(model_data),
K = ncol(X),
y = model_data$Accuracy,
X = X
)
head(model_data_new)
model_data_new <- model_data %>%
rownames_to_column(var = "row_num")
mu_df_dist <- make_plt(samples$mu, model_data_new, TRUE)
mu_df_fist
mu_df_dist
head(model_data_new)
temp <- model_data_new %>% ggplot(aes(Accuracy, colour = group, fill = group)) + geom_density(alpha = 0.3) + facet_wrap(~dist_type) + ggthemes::scale_colour_ptol() + ggthemes::scale_fill_ptol()
grid.arrange(mu_df_dist, temp, nrow = 2)
gridExtra::grid.arrange(mu_df_dist, temp, nrow = 2)
dev.off()
launch_shinystan(m_stan_group_dist)
mu_df_dist
mu_df_dist$labels$x <- "Predicted Mean Expected Success Rate"
mu_df_dist$labels$colour <- "Group"
mu_df_dist$labels$fill <- "Group"
mu_df_dist
mu_df_dist$labels$x <- "Predicted Mean Success Rate"
mu_df_dist$labels$colour <- "Group"
mu_df_dist$labels$fill <- "Group"
mu_df_dist
