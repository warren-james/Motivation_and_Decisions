count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
}
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
View(temp)
rm(list = ls())
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:1000000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
library(tidyverse)
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
a <- 0.5
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:100000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
library(tidyverse)
library(rethinking)
hpid
hpdi
HPDI
q()
help(shape)
??shape
dev.off()
1280*2
s <- list(name = "John", age = 24)
class(s) <- "student"
class(s)
student
s <- list(name = "John", age = 24)
s
a <- list(name = "Tom", age = 24)
rm(list = ls())
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
load("scratch/df_all")
head(df_all)
model_data <- df_all%>%
group_by(participant, group) %>%
summarise(accuracy = mean(correct))
m_matrix <- model.matrix(accuracy ~ group, data = model_data)
stan_df <- list(
N = nrow(model_data),
K = ncol(m_matrix),
y = model_data$accuracy,
X = m_matrix
)
stan_df
View(stan_df)
beta = 1,2,3
beta = c(1,2,3)
beta[1] *2
beta[2:3] *2
beta[-1] *2
head(model_data)
m_matrix <- model.matrix(accuracy ~ group + (1|participant), data = model_data)
model_data <- df_all %>%
select(participant, group, correct)
m_matrix <- model.matrix(accuracy ~ group + (1|participant), data = model_data)
model_data <- model_data %>%
mutate(participant = as.factor(participant))
model_data <- model_data %>%
ungroup() %>%
mutate(participant = as.factor(participant))
str(model_data)
m_matrix <- model.matrix(accuracy ~ group + (1|participant), data = model_data)
head(model_data)
m_matrix <- model.matrix(correct ~ group + (1|participant), data = model_data)
model_data <- model_data %>%
ungroup() %>%
mutate(participant = as.factor(participant))
# try random int version
m_matrix <- model.matrix(correct ~ group, data = model_data)
head(model_data)
length(model_data$participant)
length(unique(model_data$participant))
stan_df <- list(
N = nrow(model_data),
K = ncol(m_matrix),
y = model_data$correct,
S = length(unique(model_data$participant)),
subj = model_data$participant,
X = m_matrix
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
stan_df <- list(
N = nrow(model_data),
K = ncol(m_matrix),
y = model_data$correct,
S = length(unique(model_data$participant)),
subj = model_data$participant,
X = m_matrix
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
stan_df$X[-1]
stan_df$X[1]
stan_df$X[1,]
stan_df$X[,1]
stan_df$X[,-1]
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
setwd("F:/Uni/Github/Transfer_Paper/Stan_stuff")
load("../Instructed_Eye_Movements/scratch/models_df")
head(df)
str(df)
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
rm(df)
model_data <- model_data %>%
ungroup() %>%
mutate(participant = as.numeric(as.factor(participant)))
head(model_data)
m_matrix <- model.matrix(correct ~ group, data = model_data)
# setup stan_df
stan_df <- list(
N = nrow(model_data),
K = ncol(m_matrix),
y = model_data$correct,
S = length(unique(model_data$participant)),
subj = model_data$participant,
X = m_matrix
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
stand_df
stan_df
stan_df$K
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m_stan_berno <- stan(
file = "modelling/models/stan_berno_rint.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
rm(list = ls())
