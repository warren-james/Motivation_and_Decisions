success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
}
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
View(temp)
rm(list = ls())
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:1000000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
library(tidyverse)
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
a <- 0.5
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:100000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
library(tidyverse)
library(rethinking)
hpid
hpdi
HPDI
setwd("F:/Uni/PhD/2nd Year/Ben_data")
#### plots for Ben ####
# notes
# lines are on a 24x17 grid
#### Library ####
library(tidyverse)
library(brms)
#### functions ####
euc_dist <- function(x){
# hand this an n x 2 matrix
d = 0
for(ii in 1:ncol(x)){
d = d + abs((x[1, ii] - x[2, ii]))
}
d = sqrt(d)
return(d)
}
#### constants ####
mid_x <- 24/2
mid_y <- 17/2
#### load in data ####
results_files = dir("data/")
# empty frame
df_all <- data.frame()
for(f in results_files){
d = read.csv(paste("data/", f, sep = ""))
# bind
df_all <- rbind(df_all, d)
}
# tidy
rm(results_files, f, d)
df_all <- df_all %>%
rowwise() %>%
mutate(targ_side = ifelse(targ_x > mid_x, "right", "left"),
targ_homo = ifelse(hetero_side != targ_side | is.na(hetero_side), "t_hom", "t_het"),
fix_side = ifelse(fix_x > mid_x, "right", "left"),
fix_homo = ifelse(hetero_side != fix_side | is.na(hetero_side), "fix_hom", "fix_het"),
euc_dist_fix =  euc_dist(cbind(c(fix_x, targ_x),
c(fix_y, targ_y))))
df_seen <- df_all %>%
rowwise() %>%
filter(response == 1) %>%
mutate(euc_dist_pred = euc_dist(cbind(c(targ_x, stimulus_click_x),
c(targ_y, stimulus_click_y)))) %>%
select(-session,
block)
df_seen %>%
ggplot(aes(euc_dist,
colour = trial_type,
fill = trial_type)) +
geom_histogram(binwidth = 0.5,
position = "dodge") +
theme_minimal() +
facet_wrap(~targ_homo)
df_seen %>%
ggplot(aes(euc_dist,
colour = trial_type,
fill = trial_type)) +
geom_histogram(binwidth = 0.5,
position = "dodge")
View(df_seen)
df_seen %>%
ggplot(aes(euc_dist_pred,
colour = trial_type,
fill = trial_type)) +
geom_histogram(binwidth = 0.5,
position = "dodge") +
theme_minimal() +
facet_wrap(~targ_homo)
head(df_all)
df_all <- df_all %>%
rowwise() %>%
mutate(targ_side = ifelse(targ_x > mid_x, "right", "left"),
targ_homo = ifelse(hetero_side != targ_side | is.na(hetero_side), "t_hom", "t_het"),
fix_side = ifelse(fix_x > mid_x, "right", "left"),
fix_homo = ifelse(hetero_side != fix_side | is.na(hetero_side), "fix_hom", "fix_het"),
euc_dist_fix =  euc_dist(cbind(c(fix_x, targ_x),
c(fix_y, targ_y))),
euc_dist_pred = euc_dist(cbind(c(targ_x, stimulus_click_x),
c(targ_y, stimulus_click_y))))
head(euc_dist_pred)
head(df_all)
df_nfp <- df_all %>%
filter(euc_dist_pred <= 3)
unique(df_nfp$response)
m_quick_nfp <- brm(response ~ (trial_type + euc_dist_fix)^2,
data = df_nfp,
family = "bernoulli",
chains = 1,
iter = 4000,
warmup = 2000)
summary(m_quick_nfp)
plot(marginal_effects(m_quick_nfp))
556-96
# This probably makes more sense... and it a better model I believe
m_quick.1 <- brm(response ~ (targ_homo + euc_dist_fix)^2,
data = df_all,
family = "bernoulli",
chains = 1,
iter = 4000,
warmup = 2000)
summary(m_quick.1)
plot(marginal_effects(m_quick.1))
rm(list = ls())
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
#### modelling penguin ####
# This script is to work on modelling the data
# from the penguin version of the task with other
# control versions (using instructed and practice from
# the transfer paper)
#### Library ####
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
#### constants ####
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
# NB: setting seed to make results reproducible
set.seed(12345)
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
#### load in data ####
load("scratch/all_data")
df_all <- df
#tidy
rm(df)
# work out expected accuracy?
# motivated
load("scratch/acc_sep_peng")
acc_sep_peng <- acc_sep %>%
mutate(participant = paste(participant,
"motivated",
sep = "_"))
# control + optimal
load("scratch/acc_sep_contopt")
load("scratch/df_groupID")
acc_sep <- merge(acc_sep, df_groupID) %>%
mutate(participant = paste(participant, group, sep = "_")) %>%
select(-group) %>%
rbind(acc_sep_peng)
# tidy
rm(acc_sep_peng)
# bind this to df
acc_sep_1 <- acc_sep %>%
mutate(separation_1 = separation,
accuracy_1 = accuracy) %>%
select(-separation, -accuracy)
acc_sep_2 <- acc_sep %>%
mutate(separation_2 = separation,
accuracy_2 = accuracy) %>%
select(-separation, -accuracy)
df_all <- df_all %>%
mutate(separation_1 = separation*centre,
separation_2 = (separation*2)-separation_1)
# merge this
df_all<- merge(df_all, acc_sep_1)
df_all<- merge(df_all, acc_sep_2) %>%
mutate(accuracy = (accuracy_1 + accuracy_2)/2) %>%
select(-separation_1, -separation_2,
-accuracy_1, -accuracy_2)
# tidy
rm(acc_sep_1, acc_sep_2)
#### remove participant that didn't complete 4 blocks ####
df_all <- df_all %>%
group_by(participant) %>%
filter(max(block) == 4)
# plot something to check
df_all%>%
group_by(participant, group) %>%
summarise(predicted = mean(accuracy),
actual = mean(correct)) %>%
gather(predicted:actual,
key = "type",
value = "accuracy") %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
facet_wrap(~type)
# save this
save(df_all, file = "scratch/df_all")
m_brms_log <- brm(correct | trials(1) ~ group,
data = df_all,
family = binomial,
chains = 1,
iter = 2000,
warmup = 1000)
m_brms_log <- brm(correct | trials(1) ~ group,
data = df_all,
family = "bernoulli",
chains = 1,
iter = 2000,
warmup = 1000)
m_brms_bern_rint <- brm(correct ~ group + (1|participant),
data = df_all,
family = "bernoulli",
chains = 1,
iter = 2000,
warmup = 1000)
summary(m_brms_bern_rint)
plot(marginal_effects(m_brms_bern_rint))
make_stancode(correct ~ group + (1|participant),
data = df_all,
family = "bernoulli")
X <- tibble(control = rep(c(1,1,1),2),
motivated = rep(c(0,1,0),2),
optimal = rep(c(0,0,1),2),
control_f = rep(c(0,1), each = 3),
moti_f = ifelse(motivated == 1 & control_f == 1, 1, 0),
opt_f = ifelse(optimal == 1 & control_f == 1, 1, 0))
X <- as.matrix(X)
# load in models
load("modelling/model_data/berno_2")
load("modelling/model_outputs/m_stan_berno_2")
samples <- rstan::extract(m_stan_berno_dt)
X <- tibble(intercept = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
#### m1: correct ~ group ####
load("modelling/model_data/berno_1")
load("modelling/model_outputs/m_stan_berno_1")
samples <- rstan::extract(m_stan_berno)
posterior <- as.tibble(samples$beta) %>%
`colnames<-`(c("beta_1", "beta_2", "beta_3")) %>%
mutate(control = logistic(beta_1),
motivated = logistic(beta_1 + beta_2),
optimal = logistic(beta_1 + beta_3)) %>%
select(control, motivated, optimal)
head(posterior)
posterior <- as.tibble(samples$beta) %>%
`colnames<-`(c("beta_1", "beta_2", "beta_3")) %>%
mutate(control = logistic(beta_1),
motivated = logistic(beta_1 + beta_2),
optimal = logistic(beta_1 + beta_3)) %>%
select(control, motivated, optimal) %>%
gather(key = "group",
value = "mu") %>%
ggplot(aes(mu,
colour = group,
fill = group)) +
geom_density(alpha = 0.3)
posterior
beta <- samples(beta)
beta <- samples$beta
beta(1,3)
beta[1,3]
beta[1,1]
beta[3,1]
beta[2] <- beta[2] + beta[1]
beta[3] <- beta[3] + beta[1]
p <- c()
for(y in 1:3){
for(x in 1:1000){
for(ii in 1:1000){
est = sum(rbernoulli(1000, logistic(beta[x,y])))/1000
p <- c(p, est)
}
}
}
beta <- samples$beta
beta[,2] <- beta[,2] + beta[,1]
beta[,3] <- beta[,3] + beta[,1]
p <- c()
for(y in 1:3){
for(x in 1:1000){
for(ii in 1:100){
est = sum(rbernoulli(1000, logistic(beta[x,y])))/1000
p <- c(p, est)
}
}
}
plt_berno <- tibble(group = rep(c("control", "motivated", "optimal"), each = 1000*100))
plt_berno <- cbind(plt_berno, p)
plt_berno <- plt_berno %>%
ggplot(aes(p,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom")
plt_berno
beta <- colMeans(samples$beta)
plt_berno <- tibble(group = rep(c("control", "motivated", "optimal"), each = 1000))
beta[2] <- beta[2] + beta[1]
beta[3] <- beta[3] + beta[1]
p <- c()
for(y in 1:3){
for(ii in 1:1000){
est = sum(rbernoulli(1000, logistic(beta[y])))/1000
p <- c(p, est)
}
}
plt_berno <- cbind(plt_berno, p)
plt_berno <- plt_berno %>%
ggplot(aes(p,
colour = group,
fill = group)) +
geom_density(alpha = 0.3) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom")
plt_berno
m_brms_bern <- brm(correct ~ group,
data = df_all,
family = "bernoulli",
chains = 1,
iter = 2000,
warmup = 1000)
summary(m_brms_bern)
summary(m_brms_bern_rint)
plot(marginal_effects(m_brms_bern))
plot(marginal_effects(m_brms_bern_rint))
samples <- marginal_effects(m_brms_bern_rint)
