continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
}
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
View(temp)
rm(list = ls())
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:1000000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
library(tidyverse)
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
a <- 0.5
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:100000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
library(tidyverse)
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
#### load in data ####
load("scratch/all_data")
df_all <- df
#tidy
rm(df)
# work out expected accuracy?
# motivated
load("scratch/acc_sep_peng")
acc_sep_peng <- acc_sep %>%
mutate(participant = paste(participant,
"motivated",
sep = "_"))
# control + optimal
load("scratch/acc_sep_contopt")
load("scratch/df_groupID")
acc_sep <- merge(acc_sep, df_groupID) %>%
mutate(participant = paste(participant, group, sep = "_")) %>%
select(-group) %>%
rbind(acc_sep_peng)
# tidy
rm(acc_sep_peng)
# bind this to df
# need to figure out distances... before binding...
acc_sep_1 <- acc_sep %>%
mutate(separation_1 = separation,
accuracy_1 = accuracy) %>%
select(-separation, -accuracy)
acc_sep_2 <- acc_sep %>%
mutate(separation_2 = separation,
accuracy_2 = accuracy) %>%
select(-separation, -accuracy)
df_all <- df_all %>%
mutate(separation_1 = separation*centre,
separation_2 = (separation*2)-separation_1)
# merge this
df_all<- merge(df_all, acc_sep_1)
df_all<- merge(df_all, acc_sep_2) %>%
mutate(accuracy = (accuracy_1 + accuracy_2)/2) %>%
select(-separation_1, -separation_2,
-accuracy_1, -accuracy_2)
# tidy
rm(acc_sep_1, acc_sep_2)
#### remove participant that didn't complete 4 blocks ####
df_all <- df_all %>%
group_by(participant) %>%
filter(max(block) == 4)
# plot something to check
df_all%>%
group_by(participant, group) %>%
summarise(predicted = mean(accuracy),
actual = mean(correct)) %>%
gather(predicted:actual,
key = "type",
value = "accuracy") %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
facet_wrap(~type)
model_data_2 <- df_all %>%
group_by(participant, group) %>%
summarise(Accuracy = mean(correct)) %>%
mutate(Accuracy = (Accuracy + 1e-5)*0.9999)
X <- model.matrix(Accuracy ~ group, data = model_data_2)
model_data_new <- model_data_2 %>%
rownames_to_column(var = "row_num")
stan_df <- list(
N = nrow(model_data_2),
K = ncol(X),
y = model_data_2$Accuracy,
X = X
)
m_stan_group <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
samples <- rstan::extract(m_stan_group)
View(X)
