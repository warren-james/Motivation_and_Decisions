} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
num_succ = count
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
}
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
View(temp)
rm(list = ls())
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:1000000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
library(tidyverse)
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
a <- 0.5
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:100000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
library(tidyverse)
library(rethinking)
hpid
hpdi
HPDI
q()
help(shape)
??shape
dev.off()
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rbernoulli(1, p = 0.5)
library(brms)
rbernoulli(1, p = 0.5)
library(rstan)
rbernoulli(1, p = 0.5)
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
#### modelling penguin ####
# This script is to work on modelling the data
# from the penguin version of the task with other
# control versions (using instructed and practice from
# the transfer paper)
#### Library ####
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
#### constants ####
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
# NB: setting seed to make results reproducible
set.seed(12345)
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
load("scratch/df_all")
load("modelling/model_outputs/m_stan_berno_1")
model_data <- df_all %>%
select(participant, group, block, correct)
m_matrix <- model.matrix(correct ~ (group + block)^2, data = model_data)
stan_df <- list(
N = nrow(model_data),
K = ncol(m_matrix),
y = model_data$correct,
X = m_matrix
)
# WIP, takes far too long, not sure why
m_stan_berno_blk <- stan(
file = "modelling/models/stan_berno.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
summary(m_stan_berno)
summary(m_stan_berno_blk)$summary
summary(m_stan_berno)$summary
summary(m_stan_berno_blk)$c_summary
summary(m_stan_berno)$c_summary
loo_1 <- loo(m_stan_berno)
View(m_stan_berno)
