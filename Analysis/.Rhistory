cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, m_matrix)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
m <- m_stan_group_exp
post <- rstan::extract(m)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
m_matrix <- X
x <- x_vals
post <- rstan::extract(m)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
ii = 1
hdi(rbeta(1000, A[ii], B[ii]))
hdi(rbeta(1000, A[3], B[3]))
temp[1]
temp <- HDInterval::hdi(rbeta(1000, A[ii], B[ii]))
temp[1]
temp
temp[1.]
temp[1,]
temp[,1]
temp[1]
temp[2]
temp$upper
temp <- as.numeric(temp)
temp
temp[1]
temp[2]
temp <- as.numeric(HDInterval::hdi(rbeta(1000, A[ii], B[ii])))
temo
temp
post_preds_beta <- function(m, x, m_matrix){
post <- rstan::extract(m)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
p <- unlist(map2(A, B, dbeta, x = x_vals))
hpdi_dist <- data.frame(lower = numeric(),
upper = numeric())
for(ii in 1:3){
temp <- as.numeric(HDInterval::hdi(rbeta(1000, A[ii], B[ii])))
hpdi_dist <- rbind(hpdi_dist, data.frame(lower = temp[1],
upper = temp[2]))
}
result <- list("p" = p, "hpdi_dist" = hpdi_dist)
return(result)
}
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.2) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.2) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_posterior <- tibble(
Group = rep(unique(model_data_3$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group_exp, x_vals, X)$p) %>%
ggplot(aes(x, p, colour = Group, fill = Group)) +
#geom_line(aes(group = Group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.6, 0.9)) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Predicted Mean Expected Accuracy"
plt_posterior$labels$y <- "density"
plt_posterior
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.2) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_posterior
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
rm(list = ls)()
rm(list = ls())
setwd("F:/Uni/Github/Motivation_and_Decisions/Analysis")
#### modelling penguin ####
# This script is to work on modelling the data
# from the penguin version of the task with other
# control versions (using instructed and practice from
# the transfer paper)
#### Library ####
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
#### constants ####
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
# get posterior preds for beta dist
post_preds_beta <- function(m, x, m_matrix){
post <- rstan::extract(m)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
p <- unlist(map2(A, B, dbeta, x = x_vals))
hpdi_dist <- data.frame(lower = numeric(),
upper = numeric())
for(ii in 1:3){
temp <- as.numeric(HDInterval::hdi(rbeta(1000, A[ii], B[ii])))
hpdi_dist <- rbind(hpdi_dist, data.frame(lower = temp[1],
upper = temp[2]))
}
result <- list("p" = p, "hpdi_dist" = hpdi_dist)
return(result)
}
#### load in data ####
load("scratch/all_data")
df_all <- df
#tidy
rm(df)
# work out expected accuracy?
# motivated
load("scratch/acc_sep_peng")
acc_sep_peng <- acc_sep %>%
mutate(participant = paste(participant,
"motivated",
sep = "_"))
# control + optimal
load("scratch/acc_sep_contopt")
load("scratch/df_groupID")
acc_sep <- merge(acc_sep, df_groupID) %>%
mutate(participant = paste(participant, group, sep = "_")) %>%
select(-group) %>%
rbind(acc_sep_peng)
# tidy
rm(acc_sep_peng)
# bind this to df
# need to figure out distances... before binding...
acc_sep_1 <- acc_sep %>%
mutate(separation_1 = separation,
accuracy_1 = accuracy) %>%
select(-separation, -accuracy)
acc_sep_2 <- acc_sep %>%
mutate(separation_2 = separation,
accuracy_2 = accuracy) %>%
select(-separation, -accuracy)
df_all <- df_all %>%
mutate(separation_1 = separation*centre,
separation_2 = (separation*2)-separation_1)
# merge this
df_all<- merge(df_all, acc_sep_1)
df_all<- merge(df_all, acc_sep_2) %>%
mutate(accuracy = (accuracy_1 + accuracy_2)/2) %>%
select(-separation_1, -separation_2,
-accuracy_1, -accuracy_2)
# tidy
rm(acc_sep_1, acc_sep_2)
#### remove participant that didn't complete 4 blocks ####
df_all <- df_all %>%
group_by(participant) %>%
filter(max(block) == 4)
# plot something to check
df_all%>%
group_by(participant, group) %>%
summarise(predicted = mean(accuracy),
actual = mean(correct)) %>%
gather(predicted:actual,
key = "type",
value = "accuracy") %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
facet_wrap(~type)
model_data_2 <- df_all%>%
group_by(participant, group) %>%
summarise(accuracy = mean(correct))
m_matrix <- model.matrix(accuracy ~ group, data = model_data_2)
# setup data for plotting
model_data_new <- model_data_2 %>%
rownames_to_column(var = "row_num")
stan_df <- list(
N = nrow(model_data_2),
K = ncol(m_matrix),
y = model_data_2$accuracy,
X = m_matrix
)
m_stan_group <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
# extract samples
samples <- rstan::extract(m_stan_group)
X <- tibble(intercept = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
# plt posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)$p) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
mu <- array(0, dim = c(nrow(samples$beta), nrow(X)))
for (ii in 1:nrow(samples$beta)) {
mu[ii, ] <- plogis(X %*% samples$beta[ii, ])
}
hpdi_mu <- as.tibble(t(purrr::map_df(as.tibble(mu), hdi))) %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
`colnames<-`(c("lower", "upper", "group")) %>%
select(group, lower, upper)
hpdi_mu
hpdi_dist <- post_preds_beta(m_stan_group, x_vals, X)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.2) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.3) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
model_data_3 <- df_all%>%
group_by(participant, group) %>%
summarise(pred_accuracy = mean(accuracy))
m_matrix <- model.matrix(pred_accuracy ~ group, data = model_data_3)
# setup data for plotting
model_data_new <- model_data_3 %>%
rownames_to_column(var = "row_num")
stan_df <- list(
N = nrow(model_data_3),
K = ncol(m_matrix),
y = model_data_3$pred_accuracy,
X = m_matrix
)
m_stan_group_exp <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
samples <- rstan::extract(m_stan_group_exp)
X <- tibble(intercept = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
# plt posterior
plt_posterior <- tibble(
Group = rep(unique(model_data_3$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group_exp, x_vals, X)$p) %>%
ggplot(aes(x, p, colour = Group, fill = Group)) +
#geom_line(aes(group = Group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.6, 0.9)) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Predicted Mean Expected Accuracy"
plt_posterior$labels$y <- "density"
plt_posterior
mu <- array(0, dim = c(nrow(samples$beta), nrow(X)))
for (ii in 1:nrow(samples$beta)) {
mu[ii, ] <- plogis(X %*% samples$beta[ii, ])
}
hpdi_mu <- as.tibble(t(purrr::map_df(as.tibble(mu), hdi))) %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
`colnames<-`(c("lower", "upper", "group")) %>%
select(group, lower, upper)
hpdi_mu
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.2) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
View(plt_shaded_regions)
ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line()
View(plt_shaded_regions)
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(Group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(group, lower, upper)
hpdi_dist
# new plot for shaded regions
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line()
hpdi_dist <- post_preds_beta(m_stan_group_exp, x_vals, X)$hpdi_dist %>%
cbind(tibble(Group = c("control", "motivated", "optimal"))) %>%
remove_rownames() %>%
select(Group, lower, upper)
hpdi_dist
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_dist) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line()
gplot(plt_shaded_regions,
aes(x, p,
colour = Group,
fill = Group)) +
geom_line()
ggplot(plt_shaded_regions,
aes(x, p,
colour = Group,
fill = Group)) +
geom_line()
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = Group,
fill = Group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.2) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_diff <- tibble(control = mu[,1],
motivated = mu[,2],
optimal = mu[,3]) %>%
mutate("Motivated - Control" = motivated - control,
"Optimal - Control" = optimal - control,
"Optimal - Motive" = optimal - motivated) %>%
select(-control,
-motivated,
-optimal) %>%
gather(key = "Comparison",
value = "Difference") %>%
ggplot(aes(Difference,
colour = Comparison,
fill = Comparison)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = 0,
linetype = "dashed") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom")
plt_diff
plt_real <- model_data_3 %>%
ggplot(aes(pred_accuracy, colour = group, fill = group)) +
geom_histogram(position = "identity",
bins = 20,
alpha = 0.4) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_continuous(limits = c(0.6,0.9)) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
plt_real$labels$x <- "Expected Accuracy"
plt_real$labels$colour <- "Group"
plt_real$labels$fill <- "Group"
plt_both <- gridExtra::grid.arrange(plt_real, plt_posterior, nrow = 2)
plt_shaded_regions
gridExtra::grid.arrange(plt_real, plt_shaded_regions, ncol = 1)
gridExtra::grid.arrange(plt_real, plt_shaded_regions + scale_x_continuous(limits = c(0.6, 0.9)), ncol = 1)
