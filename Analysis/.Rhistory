X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
#### m1: acc ~ group ####
#### m1: First no priors ####
load("modelling/model_data/beta_1")
load("modelling/model_outputs/m_stan_group_beta_1")
load("modelling/model_outputs/m_stan_group_beta_1_pdata")
model <- m_stan_group
samples <- rstan::extract(model)
# sort out group labels
model_data <- model_data %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
# plt posterior
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
merge(hpdi_mu) %>%
ungroup()
max_height
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
plt_shaded_mu <- plt_shaded_mu_beta(plt_mu[["data"]], hpdi_mu, plt_posterior[["data"]])
plt_shaded_mu
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round")
hpdi_diff <- plt_diff[[2]]
hpdi_diff
load("modelling/model_outputs/m_stan_group_beta_1_pdata")
model <- m_stan_group_pdata
samples <- rstan::extract(model)
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
merge(hpdi_mu) %>%
ungroup()
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 1,
lineend = "round")
hpdi_diff <- plt_diff[[2]]
hpdi_diff
load("modelling/model_data/beta_2")
load("modelling/model_outputs/m_stan_group_beta_2")
model <- m_stan_group_exp
samples <- rstan::extract(model)
model_data <- model_data %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
mutate(height = max(p)/5) %>%
group_by(group) %>%
summarise(height = unique(height)) %>%
mutate(height = ifelse(group == "Control", height - .5, height)) %>%
merge(hpdi_mu)
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
plt_shaded_mu <- plt_shaded_mu_beta(plt_mu[["data"]], hpdi_mu, plt_posterior[["data"]])
plt_shaded_mu
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round")
hpdi_diff <- plt_diff[[2]]
hpdi_diff
load("modelling/model_outputs/m_stan_group_beta_2_pdata")
model <- m_stan_group_exp_pdata
samples <- rstan::extract(model)
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
# get predictions for mu
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
ungroup() %>%
merge(hpdi_mu)
# add in line for hpdi
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round")
hpdi_diff <- plt_diff[[2]]
hpdi_diff
n <- 250
beta_mu <- (a/(a+b))
beta_sd <- 1
# variance
# gamma_mu <- (a*b)/((a+b)^2*(a+b+1))
gamma_mu <- 2
gamma_sd <- 0.5
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
load("scratch/Part1_peng")
df_peng <- df %>%
mutate(participant = paste(participant, "penguin", sep = "_"))
load("scratch/Part1_cont")
df_part1 <- df %>%
mutate(participant = paste(participant, "control", sep = "_")) %>%
rbind(df_peng)
# tidy
rm(df, df_peng)
# make a quick plot?
m_dat <- df_part1 %>%
group_by(participant) %>%
summarise(accuracy = mean(accuracy))
m_dat %>%
ggplot(aes(accuracy)) +
geom_density()
# plot raw data and fit output
m_dat %>%
ggplot(aes(accuracy)) +
geom_density(fill = "black", alpha = 0.3) +
geom_line(data = temp,
aes(x, y),
colour = "blue")
# fit distribution
prior_est <- fitdistrplus::fitdist(m_dat$accuracy, "beta")
a <- as.numeric(prior_est$estimate[1])
b <- as.numeric(prior_est$estimate[2])
# settings for the priors
n <- 250
beta_mu <- (a/(a+b))
beta_sd <- 1
# variance
# gamma_mu <- (a*b)/((a+b)^2*(a+b+1))
gamma_mu <- 2
gamma_sd <- 0.5
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
n <- 250
beta_mu <- (a/(a+b))
beta_sd <- 0.7
# variance
# gamma_mu <- (a*b)/((a+b)^2*(a+b+1))
gamma_mu <- 2
gamma_sd <- 0.5
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
priors %>% group_by(iter) %>% filter(y == max(y)) %>% mutate(mean = mean(x_vals))
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ungroup () %>%mutate(mean = mean(x_vals))
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ungroup () %>%summarise(mean = mean(x_vals))
n <- 250
beta_mu <- (a/(a+b))
beta_sd <- 0.7
# variance
# gamma_mu <- (a*b)/((a+b)^2*(a+b+1))
gamma_mu <- 2
gamma_sd <- 0.5
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ungroup () %>%summarise(mean = mean(x_vals))
(a/(a+b))
n <- 250
beta_mu <- (a/(a+b))
beta_sd <- 0.7
# variance
# gamma_mu <- (a*b)/((a+b)^2*(a+b+1))
gamma_mu <- 3
gamma_sd <- 0.5
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# empty frame to add to
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors %>% group_by(iter) %>% filter(y == max(y)) %>% ggplot(aes(x_vals)) + geom_histogram()
m_stan_group_exp_pdata <- stan(
file = "modelling/models/stan_model_pfdata2.stan",
data = stan_df,
chains = 1,
warmup = 2000,
iter = 4000,
refresh = 100
)
save(m_stan_group_exp_pdata, file = "modelling/model_outputs/m_stan_group_beta_2_pdata2")
#### load in data ####
load("scratch/model_data")
model_data <- df_all %>%
group_by(participant, group) %>%
summarise(pred_accuracy = mean(accuracy)) %>%
ungroup()
m_matrix <- model.matrix(pred_accuracy ~ group, data = model_data)
stan_df <- list(
N = nrow(model_data),
K = ncol(m_matrix),
y = model_data$pred_accuracy,
X = m_matrix
)
m_stan_group_exp_pdata <- stan(
file = "modelling/models/stan_model_pfdata2.stan",
data = stan_df,
chains = 1,
warmup = 2000,
iter = 4000,
refresh = 100
)
save(m_stan_group_exp_pdata, file = "modelling/model_outputs/m_stan_group_beta_2_pdata2")
model_data <- model_data %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
model <- m_stan_group_exp_pdata
samples <- rstan::extract(model)
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
ungroup() %>%
merge(hpdi_mu)
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
plt_shaded_mu <- plt_shaded_mu_beta(plt_mu[["data"]], hpdi_mu, plt_posterior[["data"]])
plt_shaded_mu
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round")
hpdi_diff <- plt_diff[[2]]
hpdi_diff
priors_plt
