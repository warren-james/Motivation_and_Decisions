hdi(temp$p)
hdi(temp$p, width = 0.95)
plt_posterior
x_vals <- seq(0,1,0.001)
x_vals <- seq(0,1-0.001,0.001)
hdi(temp$x)
post <- samples
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
hdi(dbeta(x_vals, A, B))
hdi(map2(A, B, dbeta, x = x_vals)
)
hdi(map2(A, B, dbeta, x_vals))
temp <- dbeta(x_vals, 20, 12)
plot(x_vals, temp)
hdi(temp)
head(temp)
density(temp)
hdi(temp$y)
plt_shaded_regions
tst2 <- c(rnorm(1e5), rnorm(5e4, 7))
hist(tst2, freq=FALSE)
(hdiMC <- hdi(tst2))
segments(hdiMC[1], 0, hdiMC[2], 0, lwd=3, col='red')
dens2 <- density(tst2)
lines(dens2, lwd=2, col='blue')
(hdiD1 <- hdi(dens2))  # default allowSplit = FALSE; note the warning
(ht <- attr(hdiD1, "height"))
segments(hdiD1[1], ht, hdiD1[2], ht, lty=3, col='blue')
(hdiD2 <- hdi(dens2, allowSplit=TRUE))
segments(hdiD2[, 1], ht, hdiD2[, 2], ht, lwd=3, col='blue')
rm(list = ls())
#### modelling penguin ####
# This script is to work on modelling the data
# from the penguin version of the task with other
# control versions (using instructed and practice from
# the transfer paper)
#### Library ####
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
#### constants ####
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
# get posterior preds for beta dist
post_preds_beta <- function(m, x, m_matrix){
post <- rstan::extract(m)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
p <- unlist(map2(A, B, dbeta, x = x_vals))
return(p)
}
#### load in data ####
load("scratch/all_data")
df_all <- df
#tidy
rm(df)
# work out expected accuracy?
# motivated
load("scratch/acc_sep_peng")
acc_sep_peng <- acc_sep %>%
mutate(participant = paste(participant,
"motivated",
sep = "_"))
# control + optimal
load("scratch/acc_sep_contopt")
load("scratch/df_groupID")
acc_sep <- merge(acc_sep, df_groupID) %>%
mutate(participant = paste(participant, group, sep = "_")) %>%
select(-group) %>%
rbind(acc_sep_peng)
# tidy
rm(acc_sep_peng)
# bind this to df
# need to figure out distances... before binding...
acc_sep_1 <- acc_sep %>%
mutate(separation_1 = separation,
accuracy_1 = accuracy) %>%
select(-separation, -accuracy)
acc_sep_2 <- acc_sep %>%
mutate(separation_2 = separation,
accuracy_2 = accuracy) %>%
select(-separation, -accuracy)
df_all <- df_all %>%
mutate(separation_1 = separation*centre,
separation_2 = (separation*2)-separation_1)
# merge this
df_all<- merge(df_all, acc_sep_1)
df_all<- merge(df_all, acc_sep_2) %>%
mutate(accuracy = (accuracy_1 + accuracy_2)/2) %>%
select(-separation_1, -separation_2,
-accuracy_1, -accuracy_2)
# tidy
rm(acc_sep_1, acc_sep_2)
#### remove participant that didn't complete 4 blocks ####
df_all <- df_all %>%
group_by(participant) %>%
filter(max(block) == 4)
# plot something to check
df_all%>%
group_by(participant, group) %>%
summarise(predicted = mean(accuracy),
actual = mean(correct)) %>%
gather(predicted:actual,
key = "type",
value = "accuracy") %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
theme_minimal() +
facet_wrap(~type)
model_data_2 <- df_all%>%
group_by(participant, group) %>%
summarise(accuracy = mean(correct))
m_matrix <- model.matrix(accuracy ~ group, data = model_data_2)
# setup data for plotting
model_data_new <- model_data_2 %>%
rownames_to_column(var = "row_num")
stan_df <- list(
N = nrow(model_data_2),
K = ncol(m_matrix),
y = model_data_2$accuracy,
X = m_matrix
)
m_stan_group <- stan(
file = "modelling/models/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
# extract samples
samples <- rstan::extract(m_stan_group)
#### PLOTTING: Accuracy ~ group ####
# posterior_preds
# setup effects
X <- tibble(intercept = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
# plt posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position_dodge(width = 0.3), alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(aes(position_dodge(width = 0.3)), alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position = position_dodge(width = 0.3), alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position = position_dodge(width = 0.01), alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
plt_posterior <- tibble(
group = rep(unique(model_data_2$group), each = length(x_vals)),
x = rep(x_vals, 3),
p = post_preds_beta(m_stan_group, x_vals, X)) %>%
ggplot(aes(x, p, colour = group, fill = group)) +
#geom_line(aes(group = Group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = c(seq(0,15,5))) +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme(legend.position = "bottom")
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
plt_posterior
mu <- array(0, dim = c(nrow(samples$beta), nrow(X)))
for (ii in 1:nrow(samples$beta)) {
mu[ii, ] <- plogis(X %*% samples$beta[ii, ])
}
hpdi_2 <- as.tibble(t(purrr::map_df(as.tibble(mu), hdi))) %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
`colnames<-`(c("lower", "upper", "group")) %>%
select(group, lower, upper)
hpdi_2
hdi
HPDI
mu <- array(0, dim = c(nrow(samples$beta), nrow(X)))
for (ii in 1:nrow(samples$beta)) {
mu[ii, ] <- plogis(X %*% samples$beta[ii, ])
}
# version 2; doesn't need rethinking
hpdi_2 <- as.tibble(t(purrr::map_df(as.tibble(mu), hdi))) %>%
cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
`colnames<-`(c("lower", "upper", "group")) %>%
select(group, lower, upper)
hpdi_2
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_2) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_2) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.3) +
scale_continuous_x(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_shaded_regions <- merge(plt_posterior[["data"]], hpdi_2) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_regions <- ggplot(plt_shaded_regions,
aes(x, p,
colour = group,
fill = group)) +
geom_line() +
geom_area(data = filter(plt_shaded_regions, variable == 1),
position = "dodge",
alpha = 0.3) +
scale_x_continuous(limits = c(0.5, 0.9)) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol()
plt_shaded_regions
plt_posterior[["data"]] %>% ggplot(x, p, colour = group, fill = group) + geom_histogram(alpha = 0.4, position = "dodge")
head(plt_posterior[["data"]]
)
plt_posterior[["data"]] %>% ggplot(aes(x, p, colour = group, fill = group)) + geom_histogram(alpha = 0.4, position = "dodge")
plt_posterior[["data"]] %>% ggplot(aes() p, colour = group, fill = group)) + geom_histogram(alpha = 0.4, position = "dodge")
plt_shaded_regions
head(model_data_2)
temp <- model_data_2 %>%
group_by(group) %>%
mutate(upper = hdi(accuracy)[1],
lower = hdi(accuracy)[2])
head(temp)
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2])
head(temp)
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2])
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density()
temp
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_area()
temp
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density()
temp
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3)
temp
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = uupper)
temp
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = upper)
temp
head(temp[["data"]])
temp <- model_data_2 %>%
group_by(group) %>%
mutate(lower = hdi(accuracy)[1],
upper = hdi(accuracy)[2]) %>%
ggplot(aes(accuracy, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = lower)
temp
plt_shaded_regions
summary(m_stan_group)
nclbayes::hdibeta(0.95, 20, 50)
plt_diff <- tibble(control = mu[,1],
motivated = mu[,2],
optimal = mu[,3]) %>%
mutate("Motivated - Control" = motivated - control,
"Optimal - Control" = optimal - control,
"Optimal - Motive" = optimal - motivated) %>%
select(-control,
-motivated,
-optimal) %>%
gather(key = "Comparison",
value = "Difference") %>%
ggplot(aes(Difference,
colour = Comparison,
fill = Comparison)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = 0,
linetype = "dashed") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom")
plt_diff
plt_diff <- tibble(control = mu[,1],
motivated = mu[,2],
optimal = mu[,3]) %>%
mutate("Motivated - Control" = motivated - control,
"Optimal - Control" = optimal - control,
"Optimal - Motivated" = optimal - motivated) %>%
select(-control,
-motivated,
-optimal) %>%
gather(key = "Comparison",
value = "Difference") %>%
ggplot(aes(Difference,
colour = Comparison,
fill = Comparison)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = 0,
linetype = "dashed") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom")
plt_diff
plt_save <- gridExtra::grid.arrange(plt_posterior, plt_diff, ncol = 2)
ggsave(plt_save, file = "../Figures/Model_stan_rawacc_compare.png",
height = 5,
width = 13)
plt_shaded_regions
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
rbeta(1, 20, 15)
plt_shaded_regions
beta(20,15)
beta(20,15)
help(beta)
help(beta)
exp(beta(20,15))
log(beta(20,15))
rbera(20,15)
rbeta(20,15)
rbeta(1,15,20)
rbeta(1,15,30)
rbeta(1,15,30)
post <- extract(m_stan_group)
post <- rstan::extract(m_stan_group)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
m_matrix <- X
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
rbeta(1, A, B)
rbeta(1, A[1], B[1])
rbeta(1, A[2], B[2])
A[2]
rbeta(1, A[3], B[3])
rbeta(1, A[3], B[3])
rbeta(1, A[3], B[3])
rbeta(1, A[3], B[3])
rbeta(1, A[3], B[3])
rbeta(1, A[3], B[3])
