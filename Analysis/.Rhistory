"Optimal - Motivated" = optimal - motivated) %>%
select(-control, -motivated, -optimal)
# get mean diff
mean_diff <- temp_data %>%
gather("Comparison",
"Difference") %>%
group_by(Comparison) %>%
summarise(mean_diff = mean(Difference))
# make plot
plt_diff <- temp_data %>%
gather(key = "Comparison",
value = "Difference") %>%
ggplot(aes(Difference,
colour = Comparison,
fill = Comparison)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = 0,
linetype = "dashed") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
# get HPDI of difference
hpdi_diff <- temp_data
col_names <- as.tibble(colnames(hpdi_diff))
hpdi_diff <- as.tibble(t(purrr::map_df(hpdi_diff, hdi))) %>%
cbind(col_names) %>%
`colnames<-`(c("lower", "upper", "Comparison")) %>%
merge(mean_diff)
# return this
my_list <- list(plt_diff, hpdi_diff)
return(my_list)
}
#### PLOTTING MODELS ####
#### BETA ####
# setup effects
X <- tibble(control = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
load("modelling/model_data/beta_2")
# sort out group labels
model_data <- model_data %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
load("modelling/model_outputs/m_stan_group_beta_exp_pdata")
model <- m_stan_group_exp_pdata
samples <- rstan::extract(model)
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
ungroup() %>%
merge(hpdi_mu)
# add in line for hpdi
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round")
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
# plot with hpdi lines drawn
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
mutate(height = ifelse(group == "Motivated", height + 1, height)) %>%
ungroup() %>%
merge(hpdi_mu)
# add in line for hpdi
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
mutate(height = ifelse(group == "Motivated", height + .5, height)) %>%
ungroup() %>%
merge(hpdi_mu)
plt_posterior +
geom_segment(data = max_height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 2,
lineend = "round") +
theme(legend.title = element_blank(),
legend.spacing.x = unit(0.5, units = "cm"))
ggsave("../Figures/Model_stan_expacc_hpdi_wp.png",
height = 3.5,
width = 5.6)
library(tidyverse)
library(extraDistr)
load("scratch/Part1_peng")
df_peng <- df %>%
mutate(participant = paste(participant, "penguin", sep = "_"))
load("scratch/Part1_cont")
df_part1 <- df %>%
mutate(participant = paste(participant, "control", sep = "_")) %>%
rbind(df_peng)
# tidy
rm(df, df_peng)
# make a quick plot?
m_dat <- df_part1 %>%
group_by(participant) %>%
summarise(accuracy = mean(accuracy))
# save
save(m_dat, file = "scratch/Part1")
m_dat %>%
ggplot(aes(accuracy)) +
geom_density()
# fit distribution
prior_est <- fitdistrplus::fitdist(m_dat$accuracy, "beta")
a <- as.numeric(prior_est$estimate[1])
b <- as.numeric(prior_est$estimate[2])
# settings for the priors
n <- 250
# mean of distribution
mu <- a/(a+b)
# transform for prior
beta_mu <- gtools::logit(mu)
beta_sd <- .4
# get precision
phi <- 1/((a*b)/(((a+b)^2)*(a+b+1)))
# transform for prior
gamma_mu <- log(phi)
gamma_sd <- 1.4
x_vals <- seq(0,1.001, 0.001)
# for plotting real shape
temp <- data.frame(x = x_vals,
y = dbeta(x_vals, a, b))
# plot raw data and fit output
m_dat %>%
ggplot(aes(accuracy)) +
geom_density(fill = "black", alpha = 0.3) +
geom_line(data = temp,
aes(x, y),
colour = "blue")
priors <- data.frame(iter = numeric(),
x_vals = numeric(),
y = numeric())
for(ii in 1:n){
# select from priors
beta <- rnorm(1, beta_mu, beta_sd)
gamma <- rnorm(1, gamma_mu, gamma_sd)
# transform
mu <- plogis(beta)
phi <- exp(gamma)
# setup distribution
A <- mu * phi
B <- (1 - mu) * phi
# get posterior
y <- dbeta(x_vals, A, B)
# add to frame
priors <- rbind(priors, data.frame(iter = ii,
x_vals = x_vals,
y = y))
}
# plot this
priors %>%
ggplot(aes(x_vals, y)) +
geom_line(alpha = 0.15, aes(group = iter)) +
theme_bw() +
scale_x_continuous(labels = scales::percent)-> priors_plt
priors_plt$labels$x <- ""
priors_plt$labels$y <- ""
priors_plt
priors_plt + geom_line(data = temp,
aes(x,y),
colour = "blue",
size = 1.5,
linetype = 3,
size = 0.7)
ggsave("../Figures/priors_plt_estfromdata.png",
height = 3.5,
width = 5.6)
hpdi_diff
hpdi_diff <- plt_diff[[2]]
hpdi_diff
rm(list = ls())
#### For plotting model outputs ####
#### Library ####
library(brms)
library(rethinking)
library(psych)
library(rstan)
library(tidybayes)
library(tidyverse)
library(Rlab)
#### constants ####
Screen_dist <- 60
x_res <- 1920
x_width <- 54
ppcm <- x_res/x_width
# NB: setting seed to make results reproducible
set.seed(12345)
#### Functions ####
# get visual degrees
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
# get posterior preds for beta dist
post_preds_beta <- function(model, x_vals, m_matrix){
post <- rstan::extract(model)
beta <- colMeans(post$beta)
gamma <- colMeans(post$gamma)
mu  <- plogis(m_matrix %*% beta)
phi <- exp(m_matrix %*% gamma)
A <- mu * phi
B <- (1 - mu) * phi
p <- unlist(map2(A, B, dbeta, x = x_vals))
hpdi_dist <- data.frame(lower = numeric(),
upper = numeric())
for(ii in 1:ncol(m_matrix)){
temp <- as.numeric(HDInterval::hdi(rbeta(1000, A[ii], B[ii])))
hpdi_dist <- rbind(hpdi_dist, data.frame(lower = temp[1],
upper = temp[2]))
}
result <- list("p" = p, "hpdi_dist" = hpdi_dist)
return(result)
}
# plt posterior_beta
# NB only for discrete factors
plt_post_beta <- function(model_df, values, model, m_matrix){
list_unique <- c()
list_names <- c()
effects <- model_df %>%
ungroup() %>%
select(-1, -ncol(model_df))
for(ii in colnames(effects)){
list_unique <- c(list_unique, length(unique(effects[[ii]])))
list_names <- c(list_names, ii)
}
# list_product
list_product <- prod(list_unique)
# sort out list for appropriate list building
if(length(list_unique)>1){
list_unique <- abs(list_unique - sum(list_unique))
} else {
list_unique = 1
}
plt_dat <- tibble(remove = rep(0, prod(list_unique)))
count <- 0
for(ii in list_names){
count <- count + 1
if(count == 1){
temp <- rep(unique(effects[[ii]]), each = length(values)*list_unique[count])
} else {
temp <- rep(rep(unique(effects[[ii]]), each = length(values)), list_unique[count])
}
plt_dat <- cbind(plt_dat, temp)
}
# plt_dat <- tibble(
#   group = rep(unique(model_df$group), each = length(values)),
#   x = rep(values, length(unique(model_df$group))),
#   p = post_preds_beta(model, values, m_matrix)$p
# )
plt_posterior <- plt_dat %>%
`colnames<-`(c("remove", unique(list_names))) %>%
select(-remove) %>%
mutate(x = rep(values, list_product),
p = post_preds_beta(model, values, m_matrix)$p) %>%
# plt_posterior <- plt_dat %>%
ggplot(aes(x, p, colour = group, fill = group)) +
geom_area(position = "dodge", alpha = 0.3) +
theme_minimal() +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
scale_x_continuous(limits = c(0.4, 1),
breaks = seq(.4, 1, .1),
labels = scales::percent_format(accuracy = 1)) +
theme(legend.position = "bottom")
if(length(list_names)>1){
plt_posterior <- plt_posterior + facet_wrap(~acc_type)
}
plt_posterior$labels$x <- "Posterior Distribution"
plt_posterior$labels$y <- "density"
return(plt_posterior)
}
# plotting mean effect
plt_mu_beta <- function(samples, m_matrix, model_df){
# get mu estimates
mu <- array(0, dim = c(nrow(samples$beta), nrow(m_matrix)))
for (ii in 1:nrow(samples$beta)) {
mu[ii, ] <- plogis(m_matrix %*% samples$beta[ii, ])
}
# get column names
col_names <- model_df %>%
select(-1, -ncol(model_df))
col_names <- colnames(col_names)
# setup data frame of mu
mu_df <- as.tibble(mu) %>%
`colnames<-`(colnames(m_matrix)) %>%
gather(key = "temp",
value = "p_mu") %>%
separate(temp,
col_names,
sep = ":")
# setup hpdi for mu
hpdi_mu <- as.tibble(t(purrr::map_df(as.tibble(mu), hdi))) %>%
cbind(tibble(temp = colnames(m_matrix))) %>%
`colnames<-`(c("lower", "upper", "temp")) %>%
separate(temp,
col_names,
sep = ":")
# make data frame of this
# mu_df <- as.tibble(mu) %>%
#   `colnames<-`(c("control", "motivated", "optimal")) %>%
#   gather(key = "group",
#          value = "p_mu")
# get hdpi
# hpdi_mu <- as.tibble(t(purrr::map_df(as.tibble(mu), hdi))) %>%
#   cbind(tibble(group = c("control", "motivated", "optimal"))) %>%
#   `colnames<-`(c("lower", "upper", "group")) %>%
#   select(group, lower, upper)
# hpdi_mu
# make plt
plt_mu <- mu_df %>%
ggplot(aes(p_mu, colour = group, fill = group)) +
geom_density(alpha= 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
scale_x_continuous(limits = c(0.5, 1),
labels = scales::percent_format(accuracy = 1))
if(length(col_names) > 1){
plt_mu <- plt_mu + facet_wrap(~mu_df[[col_names[[2]]]])
}
plt_mu$labels$colour <- "Group"
plt_mu$labels$fill <- "Group"
plt_mu$labels$x <- "Predicted Mean Accuracy"
plt_mu
my_list <- list(mu, mu_df, hpdi_mu, plt_mu)
return(my_list)
}
# plt shaded_mu
plt_shaded_mu_beta <- function(data_mu, data_hpdi, data_posterior){
# get mu line
mu_line <- data.frame(group = character(),
x = numeric(),
y = numeric())
# get density profile
for(ii in unique(data_mu$group)){
temp <- filter(data_mu[data_mu$group == ii,])
x <- density(temp$p_mu)$x
y <- density(temp$p_mu)$y
mu_line <- rbind(mu_line, data.frame(group = ii,
x = x,
y = y))
}
# now make plot
plt_shaded_mu <- merge(mu_line, data_hpdi) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_mu <- ggplot(data_posterior,
aes(colour = group,
fill = group)) +
geom_line(aes(x, p)) +
geom_area(data = filter(plt_shaded_mu, variable == 1),
position = "dodge",
aes(x = x,
y = y),
alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
scale_x_continuous(limits = c(0.5, 1),
labels = scales::percent_format(accuracy = 1))
plt_shaded_mu$labels$colour <- "Group"
plt_shaded_mu$labels$fill <- "Group"
plt_shaded_mu$labels$x <- "Predicted Accuracy"
plt_shaded_mu$labels$y <- "Density"
plt_shaded_mu
return(plt_shaded_mu)
}
# plt difference for means
plt_diff_beta <- function(mu, m_matrix){
# setup data
temp_data <- tibble(control = mu[,1],
motivated = mu[,2],
optimal = mu[,3]) %>%
mutate("Motivated - Control" = motivated - control,
"Optimal - Control" = optimal - control,
"Optimal - Motivated" = optimal - motivated) %>%
select(-control, -motivated, -optimal)
# get mean diff
mean_diff <- temp_data %>%
gather("Comparison",
"Difference") %>%
group_by(Comparison) %>%
summarise(mean_diff = mean(Difference))
# make plot
plt_diff <- temp_data %>%
gather(key = "Comparison",
value = "Difference") %>%
ggplot(aes(Difference,
colour = Comparison,
fill = Comparison)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = 0,
linetype = "dashed") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
# get HPDI of difference
hpdi_diff <- temp_data
col_names <- as.tibble(colnames(hpdi_diff))
hpdi_diff <- as.tibble(t(purrr::map_df(hpdi_diff, hdi))) %>%
cbind(col_names) %>%
`colnames<-`(c("lower", "upper", "Comparison")) %>%
merge(mean_diff)
# return this
my_list <- list(plt_diff, hpdi_diff)
return(my_list)
}
#### PLOTTING MODELS ####
#### BETA ####
# setup effects
X <- tibble(control = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
load("modelling/model_data/beta_1")
load("modelling/model_outputs/m_stan_group_beta_acc")
model <- m_stan_group
samples <- rstan::extract(model)
# sort out group labels
model_data <- model_data %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
# plt posterior
load("modelling/model_outputs/m_stan_group_beta_acc_pdata")
model <- m_stan_group_pdata
samples <- rstan::extract(model)
plt_posterior <- plt_post_beta(model_data, x_vals, model, X)
plt_posterior <- plt_posterior +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
mu_list <- plt_mu_beta(samples, X, model_data)
mu <- mu_list[[1]]
mu_df <- mu_list[[2]]
hpdi_mu <- mu_list[[3]] %>%
mutate(group = ifelse(group == "optimal", "Optimal",
ifelse(group == "motivated", "Motivated", "Control")))
plt_mu <- mu_list[[4]]
plt_mu
max_height <- plt_posterior[["data"]] %>%
group_by(group) %>%
mutate(height = max(p)/5) %>%
summarise(height = unique(height)) %>%
merge(hpdi_mu) %>%
ungroup()
plt_diff <- plt_diff_beta(mu, X)
height <- plt_diff[[1]][["data"]] %>%
group_by(Comparison) %>%
summarise(height = mean(Difference)*15) %>%
merge(plt_diff[[2]])
plt_diff[[1]] +
geom_segment(data = height,
aes(x = lower, y = height,
xend = upper, yend = height),
size = 1,
lineend = "round")
# get hpdi
hpdi_diff <- plt_diff[[2]]
hpdi_diff
